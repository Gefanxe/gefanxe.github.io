{
  "data": [
    {
      "index": 1,
      "title": "重視您的手藝",
      "content": "若不管開發出來的軟體好不好，為何要花一輩子在軟體開發上？",
      "imgid": 7
    },
    {
      "index": 2,
      "title": "思考！您的工作",
      "content": "關掉自動駕使模式，並重新拿回控制權。要不斷的批評與評價您的工作。",
      "imgid": 93
    },
    {
      "index": 3,
      "title": "您擁有改變的能量",
      "content": "這是您的人生，請抓好它，讓它成為您想要的。",
      "imgid": 33
    },
    {
      "index": 4,
      "title": "請提供解決問題的選擇，停止製造爛藉口",
      "content": "不要找藉口，改為提供解決方案選項。請不要說一件事做不到，請說明什麼是做的到的。",
      "imgid": 66
    },
    {
      "index": 5,
      "title": "不要讓破窗存在",
      "content": "請在您看見壞的設計、錯誤的決策以及糟糕的程式碼時，馬上修正。",
      "imgid": 25
    },
    {
      "index": 6,
      "title": "成為改變的催化劑",
      "content": "您無法強迫別人改變，但您可以讓他們看到未來的可能性，並幫助他們參與創造未來。",
      "imgid": 43
    },
    {
      "index": 7,
      "title": "記得大方向",
      "content": "請不要過份注重細節，以致於您忘了查看您身邊發生的事。",
      "imgid": 9
    },
    {
      "index": 8,
      "title": "把品質看成一種需求",
      "content": "讓使用者參與決定專案的真實品質需求。",
      "imgid": 69
    },
    {
      "index": 9,
      "title": "請定期投資你的知識資產",
      "content": "請讓學習變成習慣。",
      "imgid": 97
    },
    {
      "index": 10,
      "title": "批判式的分析你讀到或聽到的東西",
      "content": "請不要受到廠商、媒體炒作或制式教條的影響。請站在您和您專案的角度分析資訊。",
      "imgid": 60
    },
    {
      "index": 11,
      "title": "將您的母語視為另外一種程式語言",
      "content": "將您的母語視為另一種程式語言，寫文件時把自己也當成讀者：請遵循DRY原則、ETC原則、自動化與其化。",
      "imgid": 28
    },
    {
      "index": 12,
      "title": "您說了什麼話，與您如何說這些話一樣地重要",
      "content": "若您無法有效溝通的話，有再好的點子也無用。",
      "imgid": 75
    },
    {
      "index": 13,
      "title": "內建文件說明，不要硬綁上去",
      "content": "文件程程式碼若是分開生成的話，很難會是正確，也很難維護。",
      "imgid": 99
    },
    {
      "index": 14,
      "title": "一個好的設計比爛設計更容易改動",
      "content": "如果不個東西被使用它的人所接受，就稱這個東西有好的設計。對於程式碼而言，則代表它能適應變化。",
      "imgid": 54
    },
    {
      "index": 15,
      "title": "DRY原則－－不要重複",
      "content": "在系統中的每一個知識都應有一個單一、清楚、有代表性的表示。",
      "imgid": 44
    },
    {
      "index": 16,
      "title": "容易重複使用",
      "content": "如果容易被重用的話，人們就會去重用。請建立一個支援重用的環境。",
      "imgid": 79
    },
    {
      "index": 17,
      "title": "消除不相關的東西對彼此造成的影響",
      "content": "設計元件時，應把元件設計成自我包含、獨立且擁有唯一且清楚定義的功能。",
      "imgid": 48
    },
    {
      "index": 18,
      "title": "根本沒有所謂的最終決定",
      "content": "沒有所謂的最終決定，您要把決定看成寫在海灘上的字，並為改變作好準備。",
      "imgid": 59
    },
    {
      "index": 19,
      "title": "不去管未來流行什麼",
      "content": "Neal Ford曾說過“昨日的最佳實作，會變成明日的反例”，請不要依流行選擇架構，而是要依據根基選擇架構。",
      "imgid": 31
    },
    {
      "index": 20,
      "title": "利用曳光彈找到目標位置",
      "content": "曳光彈是藉由一直嘗試的事物，看看這些事物落在離目標多遠的位置，達到讓你能鎖定目標。",
      "imgid": 91
    },
    {
      "index": 21,
      "title": "原型的目的是學習",
      "content": "原型是一種學習體驗，它的價值不在於你為它寫的程式碼，而是您用它學到的東西。",
      "imgid": 51
    },
    {
      "index": 22,
      "title": "緊靠問題所在的領域",
      "content": "用該領域的語言設計及撰寫程式碼。",
      "imgid": 52
    },
    {
      "index": 23,
      "title": "評估可以免除驚嚇",
      "content": "在您動工前先做評估，你將會提前發現一些潛在的問題。",
      "imgid": 17
    },
    {
      "index": 24,
      "title": "使用程式碼迭代時程",
      "content": "用您在實作時獲得的經驗來提升專案的時間刻度。",
      "imgid": 40
    },
    {
      "index": 25,
      "title": "在純文字中保存知識",
      "content": "純文字不會消失，它有助於提升您的工作，且簡化除錯和測試。",
      "imgid": 77
    },
    {
      "index": 26,
      "title": "善用命令Shell的力量",
      "content": "在圖形化使用者介面不能滿足要求時，請使用Shell。",
      "imgid": 16
    },
    {
      "index": 27,
      "title": "熟練編輯器",
      "content": "編輯器是您最重要的工具，要懂得如何讓它又快又準確的做您想做的事。",
      "imgid": 55
    },
    {
      "index": 28,
      "title": "一定要使用版本控制",
      "content": "版本控制是一台您工作的時光機器；您可以回到過去。",
      "imgid": 12
    },
    {
      "index": 29,
      "title": "解決問題，而不是責備某人",
      "content": "Bug是您或是其它人造成的真的不重要－它仍是您的問題，也仍然需要被修好。",
      "imgid": 72
    },
    {
      "index": 30,
      "title": "不要慌",
      "content": "不管對銀河系漫遊指南或程式設計師來說，這句話都適用。",
      "imgid": 88
    },
    {
      "index": 31,
      "title": "在修復程式之前先進行錯誤測試",
      "content": "在您修正特定bug前，請先建立一個能揭露該bug的針對性測試。",
      "imgid": 68
    },
    {
      "index": 32,
      "title": "請一定要讀那該死的錯誤訊息",
      "content": "大多數的例外都會含有什麼出錯了，以及何處失敗了的訊息。如果幸運的話，您甚至可能得到一些參數值。",
      "imgid": 96
    },
    {
      "index": 33,
      "title": "「select」沒有壞掉",
      "content": "作業系統或編譯器甚至第三方產品或函式庫，出現bug的情況真的很少。您看到的bug大多數都是在應用程式本身中。",
      "imgid": 29
    },
    {
      "index": 34,
      "title": "不要假設，請去證明",
      "content": "請在真實的環境中證明您的假設－使用真實資料與邊界條件。",
      "imgid": 56
    },
    {
      "index": 35,
      "title": "請學習一門文字操縱語言",
      "content": "你每天都會花很多時間處理文字，為何不讓電腦來幫忙做呢？",
      "imgid": 4
    },
    {
      "index": 36,
      "title": "你無法寫出完美的軟體",
      "content": "軟體不可能是完美的，請保護您的程式碼和使用者不受必然會發生的錯誤影響。",
      "imgid": 14
    },
    {
      "index": 37,
      "title": "用合約進行設計",
      "content": "使用合約設計的方法製作文件，以及驗證程式碼能不多不少地完成它所宣稱的功能。",
      "imgid": 32
    },
    {
      "index": 38,
      "title": "早期崩潰",
      "content": "一個死忙的程式造成的危害，比一個半死不活的少多了。",
      "imgid": 61
    },
    {
      "index": 39,
      "title": "請使用assertion避免不可能發生的事",
      "content": "如果是不會發生的事，請用assertion確保它真的不會發生。Assertion用於確認您的假設，請使用它們保護您的程式碼不被這個充滿變數的世界攻擊。",
      "imgid": 46
    },
    {
      "index": 40,
      "title": "由取得的資源的人負責釋放資源",
      "content": "如果可能的話，取得資源的函式或物件，應該要負責釋放該資源。",
      "imgid": 41
    },
    {
      "index": 41,
      "title": "在小區域進行動作",
      "content": "控管可變變數和開放資源的可用範圍簡短，以及讓它們容易被看見。",
      "imgid": 82
    },
    {
      "index": 42,
      "title": "每次是只走一小步",
      "content": "永遠都以小步前進；查看回饋；以及調整完再行動。",
      "imgid": 50
    },
    {
      "index": 43,
      "title": "避免猜測未来",
      "content": "只看你看得見的未來。",
      "imgid": 78
    },
    {
      "index": 44,
      "title": "去耦合化的程式碼比較好改",
      "content": "耦合代表把東西綁在一起，所以只想改變其中一項會比較困難。",
      "imgid": 47
    },
    {
      "index": 45,
      "title": "直接命令，不要詢問",
      "content": "不要從一個物件取得值、轉換那些值，然後再將值放回去。請讓該物件替您做這些事。",
      "imgid": 2
    },
    {
      "index": 46,
      "title": "不要串連呼叫方法",
      "content": "當您存取某個東西時，盡量不要使用超過一個「.」。",
      "imgid": 74
    },
    {
      "index": 47,
      "title": "避免全域資料",
      "content": "全域資料就像為每個方法都加一個額外的參數。",
      "imgid": 13
    },
    {
      "index": 48,
      "title": "如果非得當成全域資料使用，請確保將它用API包裝起來",
      "content": "...但只有在您真的、真的想要讓它變成全域時才這麼做。",
      "imgid": 24
    },
    {
      "index": 49,
      "title": "撰寫程式重點在程式碼，但程式本身的重點是資料",
      "content": "所有的程式都做著轉換資料的工作將輸入轉換為輸出·請開始以轉換的想法進行程式設計。",
      "imgid": 85
    },
    {
      "index": 50,
      "title": "不屯積狀態，徑行傳遞出去",
      "content": "不要依賴函式或模組中的資料，請拆下資料，並改用四處傳遞它。",
      "imgid": 71
    },
    {
      "index": 51,
      "title": "不要付繼承稅",
      "content": "請考慮其它可行的方案，例如介面（interface）、委派（delegation）或 mixin。",
      "imgid": 76
    },
    {
      "index": 52,
      "title": "請選用介面來表達多形關係",
      "content": "介面（interface）能達成多型的功能，又不會像繼承一樣引入耦合。",
      "imgid": 80
    },
    {
      "index": 53,
      "title": "使用委派：擁有什麼不如身為什麼",
      "content": "請不要去繼承服務：請改為包含服務。",
      "imgid": 26
    },
    {
      "index": 54,
      "title": "請使用 mixin 共享功能",
      "content": "Mixin 可以將功能加入到類别中，又不用付繼承稅。和介面（interface）一起使用的話，還可以無痛多型。",
      "imgid": 39
    },
    {
      "index": 55,
      "title": "使用外部設定，以參數化您的應用程式",
      "content": "當程式碼用到種值，這種值會隨應用程式啟動而改變的話，請把這種值存放在應用程式的外部。",
      "imgid": 34
    },
    {
      "index": 56,
      "title": "分析工作流以提升並行",
      "content": "請開拓您客戶工作流程中可並行的部份。",
      "imgid": 87
    },
    {
      "index": 57,
      "title": "共用狀態是不行的",
      "content": "共享狀態這件事，就像打開了一大罐裝滿蟲的罐頭，這種情況通常慘到只能靠重開機解決。",
      "imgid": 30
    },
    {
      "index": 58,
      "title": "隨機發生的錯，通常是並行問題",
      "content": "隨時間或上下文環境變化可能會引出並行性的 bug，但它們呈現時會不一致，也無法重置。",
      "imgid": 67
    },
    {
      "index": 59,
      "title": "使用參與者模型可做到不共用狀態的並行工作",
      "content": "使用參與者去管理並行狀態，就不用手動做同步控制。",
      "imgid": 100
    },
    {
      "index": 60,
      "title": "使用黑板協調工作流程",
      "content": "使用黑版去協調不同的事實和人物，同時又能護各參與單位的獨立性。",
      "imgid": 8
    },
    {
      "index": 61,
      "title": "聆聽內在的蜥蜴腦",
      "content": "當您感覺您程式碼的功能在倒退時，其實是您的潛意識在告訴您有東西出錯了。",
      "imgid": 15
    },
    {
      "index": 62,
      "title": "不要依賴巧合寫程式",
      "content": "只依靠可靠的東西。小心意外的複雜性，不要將一個愉快的巧合和一個有目的的計劃搞混了。",
      "imgid": 90
    },
    {
      "index": 63,
      "title": "估計您演算法大約的 Big-O 等級",
      "content": "在你寫程式之前，先對執行時間有一個大概的感覺。",
      "imgid": 18
    },
    {
      "index": 64,
      "title": "測試您的估計",
      "content": "對演算法進行數學分析無法告訴你所有的事情，請試著在目標環境中測量執行時間。",
      "imgid": 49
    },
    {
      "index": 65,
      "title": "早期重構，更常重構",
      "content": "就像您會為花園除草或進行整理一樣，在您的程式碼需要時，要也常為您的程式碼進行重寫、重做以及重新編排架構。也請修正問題的根源。",
      "imgid": 35
    },
    {
      "index": 66,
      "title": "測試的目的不是為了要找出 bug",
      "content": "測試是您程式碼的透視圖，並能提供您關於它的設計、api 及耦合性的回饋。",
      "imgid": 81
    },
    {
      "index": 67,
      "title": "測試程式是您程式的第一個使用者",
      "content": "使用測試程式給您的回饋，以知道您做些什摩事。",
      "imgid": 10
    },
    {
      "index": 68,
      "title": "用點到點的方式建構而不是自上而下或自下而上",
      "content": "請建立小的點到點功能，在過程中學習哪裡會產生問题。",
      "imgid": 84
    },
    {
      "index": 69,
      "title": "為測試而設計",
      "content": "在你寫下任何一行程式碼之前，請先想到如何測試它。",
      "imgid": 89
    },
    {
      "index": 70,
      "title": "請測試您的軟體，否則將由您的使用者進行測試",
      "content": "請無情地測試，不要讓您的使用者為您找 bug。",
      "imgid": 42
    },
    {
      "index": 71,
      "title": "使用以屬性為基礎的測試驗證您的假設",
      "content": "以屬性為基礎的測試將會試一些您從未想要試的東西，並且會以您的程式碼未預期的使用方式，去測試您的程式碼。",
      "imgid": 20
    },
    {
      "index": 72,
      "title": "保持簡單，並且最小化攻擊表面積",
      "content": "複雜的程式碼為漏洞和攻擊者創造攻擊的機會。",
      "imgid": 38
    },
    {
      "index": 73,
      "title": "儘早套用安全性更新",
      "content": "攻擊者會儘早利用漏洞，所以你必須比他們更快。",
      "imgid": 27
    },
    {
      "index": 74,
      "title": "請好好的命名；在有需要時重新命名",
      "content": "命名傳達您的企圖給閱讀程式碼的人，如果您的企圖有改變了，要儘快重新命名。",
      "imgid": 65
    },
    {
      "index": 75,
      "title": "沒有人確切地知道自己想要什麼",
      "content": "他們可能只知道一個大方向，但是他們不會知道裡面的細節。",
      "imgid": 58
    },
    {
      "index": 76,
      "title": "程式設計師幫助人們瞭解需求",
      "content": "軟體開發是一個使用者和程式設計師共同工作的活動。",
      "imgid": 45
    },
    {
      "index": 77,
      "title": "需求是從回饋的循環中瞭解的",
      "content": "瞭解需求需要探索和回饋，所以決策的結果可以用來使最初的想法更精鍊。",
      "imgid": 62
    },
    {
      "index": 78,
      "title": "和使用者一起工作，讓您像使用者般思考",
      "content": "這是瞭解系統將會如何被使用的最重要的方法。",
      "imgid": 92
    },
    {
      "index": 79,
      "title": "政策就是描述性資料",
      "content": "不要將政策寫死在系統中；請將政策做成一個該系統可用的描述資料。",
      "imgid": 86
    },
    {
      "index": 80,
      "title": "請使用專案術語表",
      "content": "請為專案中所有特定的詞和語彙，建立和維護唯一的專案術語表。",
      "imgid": 19
    },
    {
      "index": 81,
      "title": "不用跳出框框思考－而是找到框框",
      "content": "當面對一個無解的問題時，請先識別真正的限制是什麼。問問您自已：“這個問題一定要這麼做嗎？這個問題一定要全部解完嗎？”",
      "imgid": 98
    },
    {
      "index": 82,
      "title": "不要隻身進入程式碼的世界",
      "content": "程式設計這件事可能很困難，要求也很高。請找個朋友和你一起走",
      "imgid": 5
    },
    {
      "index": 83,
      "title": "敏捷不是一個名詞；敏捷是您做事的方式",
      "content": "敏捷是一個形容詞：它形容您做事的方式。",
      "imgid": 83
    },
    {
      "index": 84,
      "title": "請維護一個小型、穩定的團隊",
      "content": "團隊應該是小小的，而且穩定的，團隊中的每個人都相信其它人，並依靠著其它人。",
      "imgid": 95
    },
    {
      "index": 85,
      "title": "把工作排下去，讓它執行",
      "content": "如果您不把工作排下去，它就不會被執行。請把反省、實驗、學習與提升技能都排下去。",
      "imgid": 36
    },
    {
      "index": 86,
      "title": "請組織具有完整功能的團隊",
      "content": "請依功能而不要用工作去組織您的團隊，例如不要將UI/UX設計師與寫程式的人分開，也不要依前端和後端去分，也不要將測試者與資料建模的人分開，不要將設計和發布的人分開。請建立一個您可以建立點到點程式碼的團隊，再重複地逐漸增加團隊規模。",
      "imgid": 73
    },
    {
      "index": 87,
      "title": "用有效的開發方法，不要用流行的開發方法",
      "content": "不要只是因為其它公司使用一個開發方法或技巧，所以您就採用它。請採用適合您團隊的，適合您環境的。",
      "imgid": 57
    },
    {
      "index": 88,
      "title": "當使用者有需求時交付",
      "content": "不要只因為你的流程這麼要求，所以等好幾週或好幾個月才交付。",
      "imgid": 23
    },
    {
      "index": 89,
      "title": "請使用版本控制去驅動建構、測試和發佈",
      "content": "使用 commit 或 push 去觸發建構、測試、發佈。進行發佈到量產環境時請利用版本控制系統的 tag。",
      "imgid": 22
    },
    {
      "index": 90,
      "title": "早期測試、更常測試、自動地測試",
      "content": "隨每個建構執行的測試遠比放在書架上的測試計劃來的有效率。",
      "imgid": 3
    },
    {
      "index": 91,
      "title": "在所有的測試通過之後，程式碼才算完成",
      "content": "無可補充了。",
      "imgid": 94
    },
    {
      "index": 92,
      "title": "以刻意破壞來測試你的測試程式",
      "content": "請在另一份複製的原始碼上刻意的引發一些 bug，以驗證測試會抓到那些 bug。",
      "imgid": 37
    },
    {
      "index": 93,
      "title": "請測試狀態覆蓋率，而不是程式碼覆蓋率",
      "content": "請找出並測試一些明顯的程式狀態，只有幾行的測試是不夠的。",
      "imgid": 64
    },
    {
      "index": 94,
      "title": "不讓同樣的 bug 出現第二次",
      "content": "一旦測試人員找到一個 bug，這個bug就應該不會再被測試人員找到。之後自動測試將要能找出這種 bug。",
      "imgid": 21
    },
    {
      "index": 95,
      "title": "請不要使用手動流程",
      "content": "電腦可依一樣的順序、時間重複地執行一樣的指令。",
      "imgid": 11
    },
    {
      "index": 96,
      "title": "請您取悅使用者，不要只是發佈程式碼",
      "content": "開發解决方案可為您的使用者產生商業價值，並且每天取悅他們。",
      "imgid": 1
    },
    {
      "index": 97,
      "title": "在您的產品上簽上自己的名字",
      "content": "早期的工匠們會很自豪的為自己的作品簽上名，你也應該如此。",
      "imgid": 70
    },
    {
      "index": 98,
      "title": "第一守則，不要做傷害别人的事情",
      "content": "失敗是無可避免的，請確保不會有人因此而受盡委屈。",
      "imgid": 53
    },
    {
      "index": 99,
      "title": "不要讓卑鄙的人得逞",
      "content": "因為您也有成為其中一員的風險。",
      "imgid": 63
    },
    {
      "index": 100,
      "title": "這是您的人生，請分享它，慶祝它，建造它，並保持著愉快！",
      "content": "請享受我們擁有的美好人生，做些偉大的事。",
      "imgid": 6
    }
  ]
}
